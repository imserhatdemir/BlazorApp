@page "/admin/categories"
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles ="Admin")]
@implements IDisposable


<h3>Categories</h3>

<div class="header">
    <div class="col">Name</div>
    <div class="col">Url</div>
    <div class="col">Visible</div>
    <div class="col">Featured</div>
    <div class="col">Image</div>
    <div class="col">#</div>
</div>


@foreach(var category in CategoryService.AdminCategories)
{
    @if(category.Editing)
    {
        <EditForm Model="editingCategory" OnSubmit="UpdateCategory">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="editingCategory.Name" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingCategory.Url" class="form-control"></InputText>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="editingCategory.Visible" style="transform:scale(1.5,1.5);"></InputCheckbox>
                </div>
                <div class="col col-visible">
                    <InputCheckbox @bind-Value="editingCategory.Featured" style="transform:scale(1.5,1.5);"></InputCheckbox>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingCategory.ImageUrl" class="form-control"></InputText>
                </div>
                <div class="col" style="display:flex; flex-wrap:wrap; flex-direction:row; justify-content:center; ">

                    @if (!string.IsNullOrEmpty(editingCategory.ImageUrl))
                    {
                        <img src="@editingCategory.ImageUrl" />
                    }
                    else
                    {
                        foreach (var item in editingCategory.Images)
                        {
                            <MudCard Class="ma-2">
                                <MudCardContent>
                                    <MudImage Src="@item.Data" />
                                </MudCardContent>
                                <MudCardActions Style="justify-content:center;">
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>RemoveImage(item.Id))">Sil</MudButton>
                                </MudCardActions>
                            </MudCard>
                        }
                    }
                </div>
                <div class="col">
                    <label for="images">Images</label>
                    <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
                </div>


                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button class="btn btn-primary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">
                @category.Name
            </div>
            <div class="col">
                @category.Url
            </div>
            <div class="col col-visible">
                <span>@(category.Visible ? "✓" : "")</span>
            </div>
            <div class="col col-visible">
                <span>@(category.Featured ? "✓" : "")</span>
            </div>
            <div class="col">
                  @if (!string.IsNullOrEmpty(category.ImageUrl))
                 {
                    <img src="category.ImageUrl" width="100px" height="100px" />
                }
                else if (category.Images.Count > 0)
                {
                    <img src="category.Images[0].Data" />
                }
                
            </div>
            <div class="col">
                <button  class="btn btn-primary" @onclick="(()=>EditCategory(category))">
                    <i class="oi oi-pencil"></i>
                </button>
                <button class="btn btn-primary" @onclick="(()=>DeleteCategory(category.Id))">
                    <i class="oi oi-trash"></i>
                </button>
            </div>
        </div>
    }
}
<button class="btn btn-primary" @onclick="CreateNewCategory">
    <i class="oi oi-plus"></i> Add new category
</button>





@code {
    Category editingCategory = null;
    Category det = new Category();

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetAdminCategories();
        CategoryService.OnChange += StateHasChanged;
    }


    public void Dispose()
    {
        CategoryService.OnChange -= StateHasChanged;
    }

    private void CreateNewCategory()
    {
            editingCategory = CategoryService.CreateNewCategory();
    }

    private void EditCategory(Category category)
    {
        category.Editing = true;
        
        editingCategory = category;
    }

    private async Task UpdateCategory()
    {
        if (editingCategory.IsNew)
            await CategoryService.AddCategories(editingCategory);
        else
            await CategoryService.UpdateCategories(editingCategory);

        editingCategory = new Category();
    }

    private async Task CancelEditing()
    {
        editingCategory = new Category();
        await CategoryService.GetAdminCategories();
    }

    private async Task DeleteCategory(int id)
    {
        await CategoryService.DeleteCategories(id);
    }



    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            det.Images.Add(new CategoryImages { Data = imageData });
        }
    }

    void RemoveImage(int id)
    {
        var image = det.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            det.Images.Remove(image);
        }
    }


}
