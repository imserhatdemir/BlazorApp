@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSruntime

<section class="mt-4">
    <div class="custom-c-wrapper d-flex flex-column">

        @if (loading)
        {
            <span>@msg</span>
        }
        else
        {
            @if (product.Editing)
            {
                <h3>Edit "@product.Title"</h3>
            }
            else if (product.IsNew)
            {
                <h2>Create a new product</h2>
            }

            <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="mb-0">
                    <label for="title">Title</label>
                    <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
                </div>
                <div class="mb-0">
                    <label for="imageUrl">Image URL</label>
                    <InputText id="imageUrl" @bind-Value="product.ImageURL" class="form-control"></InputText>
                </div>
                <div class="mb-0" style="display:flex; flex-wrap:wrap; flex-direction:row; justify-content:center; ">

                    @if (!string.IsNullOrEmpty(product.ImageURL))
                    {
                        <img src="@product.ImageURL" />
                    }
                    else
                    {
                        foreach (var item in product.Images)
                        {
                            <MudCard Class="ma-2">
                                <MudCardContent>
                                    <MudImage Src="@item.Data" />
                                </MudCardContent>
                                <MudCardActions Style="justify-content:center;">
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>RemoveImage(item.Id))">Sil</MudButton>
                                </MudCardActions>
                            </MudCard>
                        }
                    }
                </div>
                <div class="mb-0">
                    <label for="images">Images</label>
                    <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
                </div>
                <div class="mb-0">
                    <label for="description">Description</label>
                    <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
                </div>
                <hr />
                <div class="header">
                    <div class="col">Product Type / Variant</div>
                    <div class="col">Price</div>
                    <div class="col">Original Price</div>
                    <div class="col">Visible</div>
                    <div class="col"></div>
                </div>
                @foreach (var item in product.Variants)
                {
                    <div class="row">
                        <div class="col">
                            <InputSelect disabled="@item.Deleted" @bind-Value="item.ProductTypeId" class="form-control">
                                @foreach (var type in ProductTypeService.ProductTypes)
                                {
                                    <option value="@type.Id.ToString()">@type.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col">
                            <InputNumber @bind-Value="item.Price" class="form-control" disabled="@item.Deleted"></InputNumber>
                        </div>
                        <div class="col">
                            <InputNumber @bind-Value="item.OriginalPrice" class="form-control" disabled="@item.Deleted"></InputNumber>
                        </div>
                        <div class="col col-visible">
                            <InputCheckbox @bind-Value="item.Visible" style="transform:scale(1.5,1.5);" disabled="@item.Deleted"></InputCheckbox>
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-primary" disabled="@item.Deleted" @onclick="@(()=>RemoveVariant(item.ProductTypeId))">
                                <i class="oi oi-trash"></i>
                            </button>
                        </div>
                    </div>
                }




                <button type="button" class="btn btn-primary" @onclick="AddVariant">
                    <i class="oi oi-plus"></i> Variant Ekle
                </button>
                <hr />

                <div class="header">
                    <div class="col">Product Type / Variant</div>
                    <div class="col">Price</div>
                    <div class="col">Original Price</div>
                    <div class="col">Visible</div>
                    <div class="col"></div>
                </div>
                @foreach (var item in product.Wizards)
                {
                    <div class="row">
                        <div class="col">
                            <InputSelect disabled="@item.Deleted" @bind-Value="item.ProductTypeId" class="form-control">
                                @foreach (var type in ProductTypeService.ProductTypes)
                                {
                                    <option value="@type.Id.ToString()">@type.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col">
                            <InputNumber @bind-Value="item.Wizard" class="form-control" disabled="@item.Deleted"></InputNumber>
                        </div>
                        <div class="col">
                            <InputNumber @bind-Value="item.WizardName" class="form-control" disabled="@item.Deleted"></InputNumber>
                        </div>
                        <div class="col col-visible">
                            <InputCheckbox @bind-Value="item.Visible" style="transform:scale(1.5,1.5);" disabled="@item.Deleted"></InputCheckbox>
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-primary" disabled="@item.Deleted" @onclick="@(()=>RemoveWizard(item.ProductTypeId))">
                                <i class="oi oi-trash"></i>
                            </button>
                        </div>
                    </div>
                }




                <button type="button" class="btn btn-primary" @onclick="AddWizard">
                    <i class="oi oi-plus"></i> Variant Ekle
                </button>
                <hr />




                <div class="mb-0">
                    <label for="category">Category</label>
                    <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                        @foreach (var category in CategoryService.AdminCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                </div>
                <hr />
                <div class="form-chech">
                    <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
                    <label for="featured" class="form-check-label">Featured</label>
                </div>
                <div class="form-chech">
                    <InputCheckbox id="visible" @bind-Value="product.Visible" class="form-check-input"></InputCheckbox>
                    <label for="visible" class="form-check-label">Visible</label>
                </div>
                <hr />
                <button type="submit" class="btn btn-primary float-end">@btnText</button>
                <br />
                <ValidationSummary></ValidationSummary>
            </EditForm>

            @if (!product.IsNew)
            {
                <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
                    Delete Product
                </button>
            }
        }
    </div>
</section>

@code {

    [Parameter]
    public int Id { get; set; }

    Product product = new Product();
    bool loading = true;
    string btnText = "";
    string msg = "Loading..";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new Product { IsNew = true };
            btnText = "CreateProduct";
        }
        else
        {
            Product dbProduct = (await ProductService.GetProduct(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"product with id '{Id}' does not exist";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "UpdateProduct";
        }
        loading = false;
    }


    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }


    void RemoveWizard(int productTypeId)
    {
        var variant = product.Wizards.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Wizards.Remove(variant);
        }
        else
        {
            variant.Deleted = true;
        }
    }




    void AddVariant()
    {
        product.Variants.Add(new ProductVariant { IsNew = true, ProductId = product.ID });

    }


    void AddWizard()
    {
        product.Wizards.Add(new ProductWizard { IsNew = true, ProdId = product.ID });

    }




    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.ID}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSruntime.InvokeAsync<bool>("confirm", $"'{product.Title}' adlı ürünü silmek istediğinize emin misiniz?");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }

    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new Image { Data = imageData });
        }
    }

    void RemoveImage(int id)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            product.Images.Remove(image);
        }
    }

}
