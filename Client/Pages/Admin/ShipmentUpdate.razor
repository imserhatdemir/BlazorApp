@page "/admin/shipments"
@page "/admin/shipments/{id:int}"
@inject IShipmentService ShipmentService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSruntime
@inject SweetAlertService swal
@attribute [Authorize(Roles = "Admin")]





<section class="mt-4">
        <div class="custom-c-wrapper d-flex flex-column">
        <div class="container">
            <h2>Horizontal form</h2>
@if(loading)
{
    <span>@msg</span>
}
else
{
    @if(ship.Editing)
    {
        <h3>Edit "@ship.Id"</h3>
    }
    else if(ship.IsNew)
    {
        <h2>Create a new product</h2>
    }



    <EditForm Model="ship" class="form-horizontal" OnValidSubmit="Add">
        <div class="form-group">
            <label class="control-label col-sm-2" for="email">Takip No</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" placeholder="Kargo takip no" @bind-value="ship.TrackingNumber" name="cargono">
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-sm-2" for="email">Çıkış Adresi</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="email" placeholder="Çıkış Adresi Gir" @bind-value="ship.Sender" name="sender">
            </div>
        </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="email">Çıkış Adresi</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" id="email" placeholder="Çıkış Adresi Gir" @bind-value="ship.OrderItems" name="sender">
                </div>
            </div>
        <div class="form-group">
            <label class="control-label col-sm-2" for="email">Varış Adresi</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="email" placeholder="Varış adresi gir" @bind-value="ship.Recipient" name="map">
            </div>
        </div>
            <div class="form-group">
                <label class="control-label col-sm-2" for="date">Date:</label>
                <div class="col-sm-10">
                    <input type="date" class="form-control" id="email" placeholder="Enter email" @bind-value="ship.ShippingDate" name="email">
                </div>
            </div>
        <div class="form-group">
            <label class="control-label col-sm-2" for="email">Varış zamanı:</label>
            <div class="col-sm-10">
                <input type="date" class="form-control" id="email" placeholder="Enter email" @bind-value="ship.ArrivalDate" name="email">
            </div>
        </div>
         <div class="form-group">
            <label class="control-label col-sm-2" for="email">Yük:</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" id="email" placeholder="Enter email" @bind-value="ship.Weight" name="email">
            </div>
        </div>
        <br />
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">
                <button type="submit" class="btn btn-success">@btnText</button>
            </div>
        </div>
              
                    <br />
          
   </EditForm>

}
        </div>
</div>
</section>

@code {
    [Parameter]
    public int Id { get; set; }

    Shipment ship = new Shipment();
    bool loading = true;
    string btnText = "";
    string msg = "Loading..";

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            ship = new Shipment { IsNew = true };
            btnText = "Ekle";
        }
        else
        {
            Shipment dbProduct = (await ShipmentService.GetShipment(Id)).Data;
            if (dbProduct == null)
            {
                msg = $"product with id '{Id}' does not exist";
                return;
            }
            ship = dbProduct;
            ship.Editing = true;
            btnText = "Güncelle";
        }
        loading = false;
    }


    async void Add()
    {
        if (ship.IsNew)
        {
            await ShipmentService.CreateShipment(ship);
            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Kargo Oluşturuldu",
                    Text = "Kargo sisteme girildi",
                    Icon = SweetAlertIcon.Success
                });
            var confirm = !string.IsNullOrEmpty(result.Value);
            NavigationManager.NavigateTo("/admin/kargo-takip-yonetimi");
        }
        else
        {
            ship.IsNew = false;
            ship = await ShipmentService.UpdateShip(ship);
            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Güncelleme işlemi tamam",
                    Text = "Güncellemeler işlendi",
                    Icon = SweetAlertIcon.Success
                });
            var confirm = !string.IsNullOrEmpty(result.Value);
            NavigationManager.NavigateTo($"admin/kargo-takip-yonetimi");
        }
    }


    private async Task CancelEditing()
    {
        ship = new Shipment();
        await ShipmentService.GetAdminShip();
    }







}
