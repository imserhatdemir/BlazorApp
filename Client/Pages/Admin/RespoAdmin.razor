@inject IResponsibilityService ResponsibilityService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<h3>Misyon ve Vizyon</h3>

<div class="header">
    <div class="col">Başlık Misyon</div>
    <div class="col">İçerik Misyon</div>
    <div class="col"></div>
</div>


@foreach (var category in ResponsibilityService.AdminResponsibilities)
{
    @if (category.Editing)
    {
        <EditForm Model="editMisVis" OnSubmit="UpdateRespo">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="editMisVis.Title" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputTextArea @bind-Value="editMisVis.Details" class="form-control"></InputTextArea>
                </div>
                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button class="btn btn-primary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">
                @category.Title
            </div>
            <div class="col">
                @category.Details
            </div>
            <div class="col">
                <button class="btn btn-primary" @onclick="(()=>EditRespo(category))">
                    <i class="oi oi-pencil"></i>
                </button>
            </div>
        </div>
    }
}




@code {
    Responsibility editMisVis = null;

    protected override async Task OnInitializedAsync()
    {
        await ResponsibilityService.GetAdminResponsibility();
        ResponsibilityService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {

        ResponsibilityService.OnChange -= StateHasChanged;
    }

    private async Task UpdateRespo()
    {
        if (editMisVis.IsNew)
            await ResponsibilityService.AddResponsibility(editMisVis);
        else
            await ResponsibilityService.UpdateResponsibility(editMisVis);

        editMisVis = Responsibility();
    }

    private void EditRespo(Responsibility missionVision)
    {
        missionVision.Editing = true;
        editMisVis = missionVision;
    }

    private async Task CancelEditing()
    {
        editMisVis = Responsibility();
        await ResponsibilityService.GetAdminResponsibility();
    }
}
