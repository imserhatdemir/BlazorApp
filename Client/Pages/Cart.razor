@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if(cartProducts==null || cartProducts.Count==0){
    <span>@message</span>
}
else
{
    <div>
        @foreach(var item in cartProducts){
            <div class="container">
                <div class="image-wrapper">
                    <img src="@item.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5><a href="/product/@item.ProductId">@item.Title</a></h5>
                    <span>@item.ProductType</span><br/>
                    <input type="number" value="@item.Quantity"
                    @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, item))"
                    class="form-control input-quantity"
                    min="1"
                    />
                    <button class="btn-delete" @onclick="@(()
                    =>RemoveProductFromCart(item.ProductId,item.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-item-price">
                    $@(item.Price * item.Quantity)
                </div>
            </div>
        }
        <div class="cart-item-price">
            Total(@cartProducts.Count):$@cartProducts.Sum(product=>product.Price * product.Quantity)
        </div>
    </div>
    @if(isAuthenticated)
    {
        <div>
            <h5>Address</h5>
            <AddressForm/>
        </div>
    }
    <button @onclick="PlaceOrder" class="btn btn-success float-end mt-1">
        Chechkout
    </button>
}


<br />
<br />
<br />
<br />

@code {
    List<CartProductResponse> cartProducts = null;
    string message = "loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    public async Task RemoveProductFromCart(int productId,int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();

    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProduct();

        if (cartProducts==null || cartProducts.Count==0)
        {
            message = "your cart is empty";
        }

    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse cproduct){
        cproduct.Quantity = int.Parse(e.Value.ToString());
        if (cproduct.Quantity < 1)
            cproduct.Quantity = 1;

        await CartService.UpdateQuantity(cproduct);
    }


    private async Task PlaceOrder()
    {
        var url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);

    }
}
