@page "/favori-urunler"
@inject IFavService FavService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Çemenardagül</PageTitle>
<section class="navigate-section">
    <div class="navigate">
        <div class="d-flex flex-column">
            <div class="d-flex align-items-center flex-wrap">
                <a href="#!" class="fs-4 fw-semibold c-2 me-2 text-decoration-none">Anasayfa</a>
                <img width="40" src="assets/images/icons/right-arrow.png" alt="">
                <a href="#!" class="fs-4 fw-bold c-2 ms-2 text-decoration-none">Favorilediğim Ürünler</a>
            </div>

        </div>
        <div class="d-flex align-items-center">
            <span class="c-2 d-flex align-items-center me-2">
                <i class="fa-solid fa-share-nodes fs-4 me-2"></i>
                <font class="fs-4 fw-semibold">Paylaş:</font>
            </span>
            <span class="d-flex align-items-center">
                <a href="#!" class="me-2 c-2"><i class="fa-solid fa-envelope fs-4 pt-1"></i></a>
                <a href="#!" class="me-2"><img height="31" src="assets/images/icons/wp-ico.png" alt=""></a>
                <a href="#!"><img height="29" src="assets/images/icons/telegram-ico.png" alt=""></a>
            </span>
        </div>
    </div>
</section>
<br />

@if (cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
        <div class="container">
            <div class="row d-flex justify-content-center align-items-center h-100">
                <div class="col-10">
                    @foreach(var item in cartProducts)
                    {
                        
                    
                    <div class="card rounded-3 mb-4">
                        <div class="card-body p-4">
                            <div class="row d-flex justify-content-between align-items-center">
                               @* <div class="col-md-2 col-lg-2 col-xl-2">
                                    <img src="#"
                                     class="img-fluid rounded-3" alt="Cotton T-shirt">
                                </div>*@
                                <div class="col-md-3 col-lg-3 col-xl-3">
                                    <p class="lead fw-normal mb-2">@item.Title</p>
                                </div>
                                    
                                <div class="col-md-3 col-lg-3 col-xl-2 d-flex">

                                        <input id="form1" min="1" name="quantity" value="@item.Quantity" @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, item))" type="number"
                                       class="form-control form-control-sm" />

                                </div>
                                <div class="col-md-3 col-lg-2 col-xl-2 offset-lg-1">
                                        <h5 class="mb-0">@(item.Price * item.Quantity) TL</h5>
                                </div>
                                <div class="col-md-1 col-lg-1 col-xl-1 text-end">
                                        <a href="#!" class="text-danger" @onclick="@(()
                    =>RemoveProductFromCart(item.ProductId))"><i class="fas fa-trash fa-lg"></i></a>
                                </div>
                            </div>
                        </div>
                    </div>

                    }
                    <div class="card">
                        <div class="card-body">
                        <p>Toplam(@cartProducts.Count):@cartProducts.Sum(product=>product.Price * product.Quantity) TL</p>
                        </div>
                    </div>

                </div>
            </div>
        </div>
}


<br />
<br />
<br />
<br />

@code {
    List<FavProductResponse> cartProducts = null;
    string message = "loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    public async Task RemoveProductFromCart(int productId)
    {
        await FavService.RemoveProductFromFav(productId);
        await LoadCart();

    }

    private async Task LoadCart()
    {
        await FavService.GetFavItemsCount();
        cartProducts = await FavService.GetFavProduct();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "your cart is empty";
        }

    }

    private async Task UpdateQuantity(ChangeEventArgs e, FavProductResponse cproduct)
    {
        cproduct.Quantity = int.Parse(e.Value.ToString());
        if (cproduct.Quantity < 1)
            cproduct.Quantity = 1;

        await FavService.UpdateQuantity(cproduct);
    }


}
