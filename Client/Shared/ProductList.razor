@inject IProductService ProductService
@implements IDisposable
@if(ProductService.Products == null || ProductService.Products.Count == 0){
    <span>Loading Products...</span>
}
else
{
<ul class="list-unstyled">
        @foreach (var item in ProductService.Products)
        {
        <li class="media my-3">
            <div class="media-img-wrapper mr-2">
                    <a href="/Product/@item.ID">
                    <img class="media-img" src="@item.ImageURL" alt="@item.Title"/>
                </a>
            </div>
            <div class="media-body">
                <a href="/Product/@item.ID">
                    <h4 class="mb-0">@item.Title</h4>
                </a>
                <p>@item.Description</p>
                <h5 class="price">
                        @GetPriceText(item)
                </h5>
            </div>
        </li>
    }
</ul>
    for(var i=1; i <= ProductService.PageCount; i++)
    {
        <a class="btn 
        @(i==ProductService.CurrentPage ? "btn-info":"btn-outline-info") page-selection" 
            href="/search/@ProductService.LastSearchText/@i">@i</a>
    }

}
@code {
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    private string GetPriceText(Product item)
    {
        var variants = item.Variants;
        if(variants.Count == 0)
        {
            return string.Empty;
        }
        else if(variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
