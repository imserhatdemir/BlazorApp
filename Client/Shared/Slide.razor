@inject ISliderService SliderService
@implements IDisposable

<section>
    <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="true">
        <div class="carousel-indicators custom-indicators">
            @if (SliderService.Sliders == null)
            {

            }
            else
            {
                @foreach (var item in SliderService.Sliders)
                {
                    <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@item.DataSlide" class="@(item.Active ? "active" : "#")"
                    aria-label="Slide @item.Id"></button>
                    if (SliderService.Sliders.IndexOf(item) == SliderService.Sliders.Count - 1)
                    {

                    }
                    else
                    {
                        <span class="sl-line"></span>
                    }

                }
            }

        </div>
        <div class="carousel-inner header-slider">
            @if (SliderService.Sliders == null)
            {

            }
            else
            {
                @foreach (var item in SliderService.Sliders)
                {
                    if (item.Description == string.Empty && item.Title == string.Empty)
                    {
                        <div class="carousel-item @(item.Active ? "active" : "")">
                            @if (!string.IsNullOrEmpty(item.Image))
                            {
                                <img src="@item.Image" class="d-block w-100" alt="">
                            }
                            else if (item.Images.Count > 0)
                            {
                                <img src="@item.Images[0].Data" class="d-block w-100" alt="">
                            }
                        </div>
                    }
                    else
                    {

                        <div class="carousel-item @(item.Active ? "active" : "")">

                            @if (!string.IsNullOrEmpty(item.Image))
                            {
                                <img src="@item.Image" class="d-block w-100"
                     alt="">
                            }
                            else if (item.Images.Count > 0)
                            {
                                <img src="@item.Images[0].Data" class="d-block w-100" alt="">
                            }
                            <div class="carousel-caption custom-caption">
                                <span><i><b>@item.Title</b></i><br>@item.Description</span>
                            </div>
                            <a href="@item.Url" class="carousel-caption custom-caption-2 text-decoration-none">
                                <span class="d-flex align-items-center">Keşfet <i class="ms-2 fa-solid fa-play pt-1"></i></span>
                            </a>
                        </div>
                    }
                }
            }


        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators"
                data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Previous</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators"
                data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Next</span>
        </button>
    </div>
</section>
@code {
    protected override async Task OnInitializedAsync()
    {
        await SliderService.GetSlider();
        SliderService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        SliderService.OnChange -= StateHasChanged;
    }

}
