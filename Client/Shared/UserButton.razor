@inject ILocalStorageService LocalStorage
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartService CartService

<div class="dropdown">

    <div @onclick="ToggleUserMenu"
            @onfocusout="HideUserMenu"
            class="fa-regular fa-user c-1 t-shadow-sm">
        </div>

        <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
            <AuthorizeView>
                <Authorized>
                <a href="profile" class="dropdown-item">Profile</a>
                <a href="orders" class="dropdown-item">Orders</a>
                <hr />
                <AdminMenu/>
                <button class="dropdown-item" @onclick="LogOut">LogOut</button>
                <br />
                </Authorized>
                <NotAuthorized>
                <a href="register" class="dropdown-item">Register</a>
                <a href="login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Login</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>
</div>

@code {
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;

    }

    private async Task LogOut()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await CartService.GetCartItemsCount();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("");
    }
}
